#!/usr/bin/env bash
# Git repository management plugin
# Copyright (c) 2017 Joe Baldwin <joe@joebaldwin.com>
# MIT License


declare -i GITREPOS_MAXDEPTH=${GITREPOS_MAXDEPTH:-1}
declare PROGNAME=$(basename $0)


# Show message then die with exit_code
die()
{
  local exit_code=0
  [[ $1 == -* ]] && exit_code=${1/-} && shift
  echo $*
  exit ${exit_code}
}


# Show help text then exit
help()
{
  echo "USAGE: ${PROGNAME} [OPTIONS] [COMMAND]"
  echo
  echo "Iterate over a number of git repositories, optionally running COMMAND"
  echo "in each one. If no COMMAND is specified, the found repositories are"
  echo "listed. The current directory, or each directory in GITREPOS_PATH, are"
  echo "searched for repositories. If the first character of COMMAND is \"/\""
  echo "or \".\", then only that absolute or relative path are searched for"
  echo "repositories."
  echo
  echo "OPTIONS"
  echo "  -h|--help           deisplay this message then exit"
  echo "  -l|--long           display full pathname rather than short repo name"
  echo "  -n|--name PATTERN   filter names by the shell glob PATTERN"
  echo "  --max-depth INTEGER the maximum depth to search (default: 1)"
  echo
  echo "ENVIRONMENT VARIABLES"
  echo "  GITREPOS_PATH       colon separated list of directories to search"
  echo "  GITREPOS_MAXDEPTH   maximum depth to search for repositories"
  exit
}


# Return list of repository paths
repos()
{
  local path
  local paths=${GITREPOS_PATH//:/ }
  local maxdepth=$(( 1 + ${GITREPOS_MAXDEPTH} ))

  [[ ${paths} ]] || paths=${PWD}

  for path in ${paths}
  do
    find ${path} -mindepth 2 -maxdepth ${maxdepth} -type d -name .git | sed -e 's#/\.git$##'
  done
}


# Filter repository name by string or glob pattern
filter()
{
  local name=$(basename $1)

  # Tranform "foo" to "*foo*" unless it already looks like a glob
  [[ ! $(tr -Cd '*?[]' <<< ${GITREPOS_FILTER}) ]] && GITREPOS_FILTER="*${GITREPOS_FILTER}*"

  [[ ${name} == ${GITREPOS_FILTER} ]]
}


# Show a list of found repositories
list()
{
  for repo in $(repos)
  do
    filter ${repo} || continue
    [[ ${LONG} ]] && echo ${repo} || echo $(basename ${repo})
  done
}


# Process arguments
while true
do
  case $1 in
    -h|--help)
      help
      ;;

    -l|--long)
      LONG=true
      shift
      ;;

    -n|--name)
      GITREPOS_FILTER=$2
      shift 2
      ;;

    --max-depth)
      GITREPOS_MAXDEPTH=$2
      shift 2
      ;;

    --)
      shift
      break
      ;;

    *)
      break
      ;;
  esac
done


[[ ${1:0:1} = . || ${1:0:1} = / ]] && GITREPOS_PATH=$1 && shift


if [[ $1 ]]
then
  for repo in $(repos)
  do
    filter ${repo} || continue
    echo
    echo ===== \<${repo}\> git "$@" =====
    cd ${repo}
    git "$@"
    exit_code=$?
    [[ ${exit_code} -eq 0 ]] || die -${exit_code} "Aborting due to git error."
  done
else
  list
fi
